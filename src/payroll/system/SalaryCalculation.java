/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package payroll.system;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Acer
 */
public class SalaryCalculation extends javax.swing.JFrame {
    /**
     * Creates new form SalaryCalculation
     */
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    String username;
    
    Calendar cal = new GregorianCalendar();
    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
    String date = sdf.format(cal.getTime());

    int second = cal.get(Calendar.SECOND);
    int minute = cal.get(Calendar.MINUTE);
    int hour = cal.get(Calendar.HOUR);
    DecimalFormat df = new DecimalFormat("00");
    String time = df.format(hour) + ":" + df.format(minute) + ":" + df.format(second);

    String type = "Salary Calculation";
    
    public SalaryCalculation() {
        initComponents();
           
        conn = db.java_db();
    }
    public SalaryCalculation(String name) {
        this.username = name;
        initComponents();
           
        conn = db.java_db();
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main_panel = new javax.swing.JPanel();
        greeting_label = new javax.swing.JLabel();
        calculation_panel = new javax.swing.JPanel();
        id_label = new javax.swing.JLabel();
        save_button = new javax.swing.JButton();
        name_label = new javax.swing.JLabel();
        position_label = new javax.swing.JLabel();
        earnings_label = new javax.swing.JLabel();
        basic_salary_label = new javax.swing.JLabel();
        txt_allowance = new javax.swing.JTextField();
        sales_label = new javax.swing.JLabel();
        txt_overtimeHours = new javax.swing.JTextField();
        overtime_hours_label = new javax.swing.JLabel();
        txt_sales = new javax.swing.JTextField();
        rate_per_hour_label = new javax.swing.JLabel();
        overtime_pay_label = new javax.swing.JLabel();
        deductions_label = new javax.swing.JLabel();
        calculate_button = new javax.swing.JButton();
        clear_button = new javax.swing.JButton();
        gross_pay_label = new javax.swing.JLabel();
        gross_pay_rm_label = new javax.swing.JLabel();
        total_deduction_label = new javax.swing.JLabel();
        total_deduction_rm_label = new javax.swing.JLabel();
        epf_label = new javax.swing.JLabel();
        sosco_label = new javax.swing.JLabel();
        eis_label = new javax.swing.JLabel();
        pcb_label = new javax.swing.JLabel();
        other_deduction_label = new javax.swing.JLabel();
        txt_pcb = new javax.swing.JTextField();
        txt_other_deduction = new javax.swing.JTextField();
        net_pay_label = new javax.swing.JLabel();
        net_pay_rm_label = new javax.swing.JLabel();
        epf_rm_label = new javax.swing.JLabel();
        sosco_rm_label = new javax.swing.JLabel();
        eis_rm_label = new javax.swing.JLabel();
        commission_rm_label = new javax.swing.JLabel();
        month_label = new javax.swing.JLabel();
        month_combobox = new javax.swing.JComboBox<>();
        lab = new javax.swing.JLabel();
        olab = new javax.swing.JLabel();
        rlab = new javax.swing.JLabel();
        odlab = new javax.swing.JLabel();
        slab = new javax.swing.JLabel();
        txt_name = new javax.swing.JLabel();
        txt_id = new javax.swing.JLabel();
        txt_position = new javax.swing.JLabel();
        basic_salary_rm_label = new javax.swing.JLabel();
        allowance_label1 = new javax.swing.JLabel();
        sales_label1 = new javax.swing.JLabel();
        overtime_pay_rm_label = new javax.swing.JLabel();
        txt_rate_per_hour = new javax.swing.JTextField();
        ilab = new javax.swing.JLabel();
        update_button = new javax.swing.JButton();
        search_label = new javax.swing.JLabel();
        txt_search = new javax.swing.JTextField();
        logout_button = new javax.swing.JButton();
        back = new javax.swing.JLabel();
        side_menu = new javax.swing.JPanel();
        dashboard_button1 = new javax.swing.JButton();
        employee_button = new javax.swing.JButton();
        calculation_button = new javax.swing.JButton();
        slip_button = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        hr_label = new javax.swing.JLabel();
        payroll_label1 = new javax.swing.JLabel();
        system_label = new javax.swing.JLabel();
        audit_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        main_panel.setBackground(new java.awt.Color(255, 255, 255));

        greeting_label.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        greeting_label.setText("Salary Calculation");

        calculation_panel.setBackground(new java.awt.Color(239, 242, 242));

        id_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        id_label.setText("Employee ID:");

        save_button.setBackground(new java.awt.Color(250, 255, 255));
        save_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        save_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/save_icon.png"))); // NOI18N
        save_button.setText("Save");
        save_button.setIconTextGap(12);
        save_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_buttonActionPerformed(evt);
            }
        });

        name_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        name_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        name_label.setText("Name:");

        position_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        position_label.setText("Position:");

        earnings_label.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        earnings_label.setText("Earnings");

        basic_salary_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        basic_salary_label.setText("Basic Salary:");

        txt_allowance.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_allowance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_allowanceActionPerformed(evt);
            }
        });
        txt_allowance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_allowanceKeyReleased(evt);
            }
        });

        sales_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        sales_label.setText("Comission:");

        txt_overtimeHours.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_overtimeHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_overtimeHoursActionPerformed(evt);
            }
        });
        txt_overtimeHours.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_overtimeHoursKeyReleased(evt);
            }
        });

        overtime_hours_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        overtime_hours_label.setText("Overtime Hours:");

        txt_sales.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_sales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_salesActionPerformed(evt);
            }
        });
        txt_sales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_salesKeyReleased(evt);
            }
        });

        rate_per_hour_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        rate_per_hour_label.setText("Rate per Hour:");

        overtime_pay_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        overtime_pay_label.setText("Overtime Pay:");

        deductions_label.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        deductions_label.setText("Deductions");

        calculate_button.setBackground(new java.awt.Color(250, 255, 255));
        calculate_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        calculate_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/calculate_icon.png"))); // NOI18N
        calculate_button.setText("Calculate");
        calculate_button.setIconTextGap(3);
        calculate_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate_buttonActionPerformed(evt);
            }
        });

        clear_button.setBackground(new java.awt.Color(250, 255, 255));
        clear_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        clear_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/clear_icon.png"))); // NOI18N
        clear_button.setText("Clear");
        clear_button.setIconTextGap(13);
        clear_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_buttonActionPerformed(evt);
            }
        });

        gross_pay_label.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        gross_pay_label.setText("Gross Pay: ");
        gross_pay_label.setAutoscrolls(true);

        gross_pay_rm_label.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        gross_pay_rm_label.setText("0.00");
        gross_pay_rm_label.setAutoscrolls(true);

        total_deduction_label.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        total_deduction_label.setText("Total Deduction:");
        total_deduction_label.setAutoscrolls(true);

        total_deduction_rm_label.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        total_deduction_rm_label.setText("0.00");
        total_deduction_rm_label.setAutoscrolls(true);

        epf_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        epf_label.setText("EPF Employee:");

        sosco_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        sosco_label.setText("SOSCO Employee:");

        eis_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        eis_label.setText("EIS Employee:");

        pcb_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        pcb_label.setText("PCB Employee:");

        other_deduction_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        other_deduction_label.setText("Other Deduction:");

        txt_pcb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_pcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_pcbActionPerformed(evt);
            }
        });
        txt_pcb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_pcbKeyReleased(evt);
            }
        });

        txt_other_deduction.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_other_deduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_other_deductionActionPerformed(evt);
            }
        });
        txt_other_deduction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_other_deductionKeyReleased(evt);
            }
        });

        net_pay_label.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        net_pay_label.setText("Net Pay:");
        net_pay_label.setAutoscrolls(true);

        net_pay_rm_label.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        net_pay_rm_label.setText("0.00");
        net_pay_rm_label.setAutoscrolls(true);

        epf_rm_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        epf_rm_label.setText("0.00");
        epf_rm_label.setAutoscrolls(true);

        sosco_rm_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        sosco_rm_label.setText("0.00");
        sosco_rm_label.setAutoscrolls(true);

        eis_rm_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        eis_rm_label.setText("0.00");
        eis_rm_label.setAutoscrolls(true);

        commission_rm_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        commission_rm_label.setText("0.00");
        commission_rm_label.setAutoscrolls(true);

        month_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        month_label.setText("Month:");

        month_combobox.setBackground(new java.awt.Color(250, 255, 255));
        month_combobox.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        month_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        month_combobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                month_comboboxActionPerformed(evt);
            }
        });

        lab.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lab.setForeground(new java.awt.Color(204, 0, 0));

        olab.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        olab.setForeground(new java.awt.Color(204, 0, 0));

        rlab.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        rlab.setForeground(new java.awt.Color(204, 0, 0));

        odlab.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        odlab.setForeground(new java.awt.Color(204, 0, 0));

        slab.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        slab.setForeground(new java.awt.Color(204, 0, 0));

        txt_name.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_name.setAutoscrolls(true);

        txt_id.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_id.setAutoscrolls(true);

        txt_position.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_position.setAutoscrolls(true);

        basic_salary_rm_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        basic_salary_rm_label.setText("0.00");
        basic_salary_rm_label.setAutoscrolls(true);

        allowance_label1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        allowance_label1.setText("Allowance:");

        sales_label1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        sales_label1.setText("Sales: ");

        overtime_pay_rm_label.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        overtime_pay_rm_label.setText("0.00");
        overtime_pay_rm_label.setAutoscrolls(true);

        txt_rate_per_hour.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_rate_per_hour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_rate_per_hourActionPerformed(evt);
            }
        });
        txt_rate_per_hour.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_rate_per_hourKeyReleased(evt);
            }
        });

        ilab.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        ilab.setForeground(new java.awt.Color(204, 0, 0));

        update_button.setBackground(new java.awt.Color(250, 255, 255));
        update_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        update_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/update_icon.png"))); // NOI18N
        update_button.setText("Update");
        update_button.setIconTextGap(6);
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout calculation_panelLayout = new javax.swing.GroupLayout(calculation_panel);
        calculation_panel.setLayout(calculation_panelLayout);
        calculation_panelLayout.setHorizontalGroup(
            calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculation_panelLayout.createSequentialGroup()
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(id_label)
                        .addGap(23, 23, 23)
                        .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(180, 180, 180)
                        .addComponent(name_label))
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(earnings_label))
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deductions_label)
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(position_label)
                                    .addComponent(month_label))
                                .addGap(22, 22, 22)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(month_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_position, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addComponent(basic_salary_label, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(basic_salary_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(allowance_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(overtime_hours_label, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_overtimeHours, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_allowance, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(olab, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(9, 9, 9))
            .addGroup(calculation_panelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addComponent(overtime_pay_label, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(overtime_pay_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sales_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sales_label, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gross_pay_label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(gross_pay_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_sales, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(calculation_panelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(commission_rm_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addComponent(rate_per_hour_label, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_rate_per_hour, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(calculate_button, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(update_button, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(clear_button, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(save_button, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(lab, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                            .addComponent(rlab, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                            .addComponent(slab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(epf_label, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(epf_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(calculation_panelLayout.createSequentialGroup()
                                        .addComponent(eis_label, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(eis_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(calculation_panelLayout.createSequentialGroup()
                                        .addComponent(sosco_label, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sosco_rm_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(2, 2, 2))
                                    .addGroup(calculation_panelLayout.createSequentialGroup()
                                        .addComponent(pcb_label, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(txt_pcb, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(calculation_panelLayout.createSequentialGroup()
                                        .addComponent(other_deduction_label, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(txt_other_deduction, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(total_deduction_label)
                                    .addComponent(net_pay_label))
                                .addGap(30, 30, 30)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(net_pay_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(total_deduction_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(odlab, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(ilab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        calculation_panelLayout.setVerticalGroup(
            calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculation_panelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(id_label)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name_label)
                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(position_label)
                    .addComponent(txt_position, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(month_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(month_label))
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(earnings_label))
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(deductions_label)))
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(basic_salary_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(basic_salary_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(calculation_panelLayout.createSequentialGroup()
                                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lab, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(allowance_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(overtime_hours_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calculation_panelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(olab, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(1, 1, 1))))
                                    .addGroup(calculation_panelLayout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(txt_overtimeHours, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txt_allowance, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_rate_per_hour, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rate_per_hour_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(rlab, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(overtime_pay_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addComponent(overtime_pay_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sales_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_sales, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(slab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sales_label)
                            .addComponent(commission_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gross_pay_label)
                            .addComponent(gross_pay_rm_label)))
                    .addGroup(calculation_panelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(calculation_panelLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sosco_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sosco_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eis_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eis_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(pcb_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txt_pcb, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ilab, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_other_deduction, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(other_deduction_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(odlab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(total_deduction_label)
                                    .addComponent(total_deduction_rm_label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(net_pay_rm_label)
                                    .addComponent(net_pay_label)))
                            .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(epf_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(epf_rm_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(calculation_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calculate_button, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update_button, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear_button, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save_button, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        search_label.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        search_label.setText("Search Employee ID:");

        txt_search.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txt_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchActionPerformed(evt);
            }
        });
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        logout_button.setBackground(new java.awt.Color(250, 255, 255));
        logout_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        logout_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/logout_icon.png"))); // NOI18N
        logout_button.setText("Logout");
        logout_button.setIconTextGap(12);
        logout_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_buttonActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Californian FB", 1, 36)); // NOI18N
        back.setText("<");
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout main_panelLayout = new javax.swing.GroupLayout(main_panel);
        main_panel.setLayout(main_panelLayout);
        main_panelLayout.setHorizontalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(greeting_label, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout_button, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(calculation_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(search_label)
                .addGap(20, 20, 20)
                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        main_panelLayout.setVerticalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(greeting_label)
                            .addComponent(logout_button, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculation_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );

        side_menu.setBackground(new java.awt.Color(0, 33, 120));
        side_menu.setPreferredSize(new java.awt.Dimension(226, 550));

        dashboard_button1.setBackground(new java.awt.Color(0, 30, 120));
        dashboard_button1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        dashboard_button1.setForeground(new java.awt.Color(255, 255, 255));
        dashboard_button1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/dashboard_icon.png"))); // NOI18N
        dashboard_button1.setText("Dashboard");
        dashboard_button1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dashboard_button1.setIconTextGap(40);
        dashboard_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboard_button1ActionPerformed(evt);
            }
        });

        employee_button.setBackground(new java.awt.Color(0, 30, 120));
        employee_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        employee_button.setForeground(new java.awt.Color(255, 255, 255));
        employee_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/empmanagement_icon.png"))); // NOI18N
        employee_button.setText(" Employee Management");
        employee_button.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        employee_button.setIconTextGap(5);
        employee_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employee_buttonActionPerformed(evt);
            }
        });

        calculation_button.setBackground(new java.awt.Color(250, 255, 255));
        calculation_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        calculation_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/calculation_icon.png"))); // NOI18N
        calculation_button.setText("Salary Calculation");
        calculation_button.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        calculation_button.setIconTextGap(23);
        calculation_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculation_buttonActionPerformed(evt);
            }
        });

        slip_button.setBackground(new java.awt.Color(0, 30, 120));
        slip_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        slip_button.setForeground(new java.awt.Color(255, 255, 255));
        slip_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/slip_icon.png"))); // NOI18N
        slip_button.setText("Salary Slip");
        slip_button.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        slip_button.setIconTextGap(38);
        slip_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slip_buttonActionPerformed(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/logo1.png"))); // NOI18N
        jLabel20.setPreferredSize(new java.awt.Dimension(100, 130));

        hr_label.setFont(new java.awt.Font("Californian FB", 0, 32)); // NOI18N
        hr_label.setForeground(new java.awt.Color(255, 255, 255));
        hr_label.setText("HR &");

        payroll_label1.setFont(new java.awt.Font("Californian FB", 0, 32)); // NOI18N
        payroll_label1.setForeground(new java.awt.Color(255, 255, 255));
        payroll_label1.setText("Payroll");

        system_label.setFont(new java.awt.Font("Californian FB", 0, 32)); // NOI18N
        system_label.setForeground(new java.awt.Color(255, 255, 255));
        system_label.setText("System");

        audit_button.setBackground(new java.awt.Color(0, 30, 120));
        audit_button.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        audit_button.setForeground(new java.awt.Color(255, 255, 255));
        audit_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/system/images/history_icon.png"))); // NOI18N
        audit_button.setText("Audit Trail");
        audit_button.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        audit_button.setIconTextGap(50);
        audit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audit_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout side_menuLayout = new javax.swing.GroupLayout(side_menu);
        side_menu.setLayout(side_menuLayout);
        side_menuLayout.setHorizontalGroup(
            side_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(side_menuLayout.createSequentialGroup()
                .addGroup(side_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(side_menuLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(side_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(hr_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(payroll_label1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .addComponent(system_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(side_menuLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(side_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(audit_button, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(side_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(slip_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(calculation_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dashboard_button1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(employee_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        side_menuLayout.setVerticalGroup(
            side_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(side_menuLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(side_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, side_menuLayout.createSequentialGroup()
                        .addComponent(hr_label)
                        .addGap(1, 1, 1)
                        .addComponent(payroll_label1)
                        .addGap(1, 1, 1)
                        .addComponent(system_label))
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(dashboard_button1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(employee_button, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(calculation_button, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(slip_button, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(audit_button, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(side_menu, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(main_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(side_menu, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
            .addComponent(main_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1200, 680));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchActionPerformed

    private void txt_allowanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_allowanceActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txt_allowanceActionPerformed

    private void txt_overtimeHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_overtimeHoursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_overtimeHoursActionPerformed

    private void txt_salesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_salesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_salesActionPerformed

    private void save_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_buttonActionPerformed
                // TODO add your handling code here        
       try {
    // SELECT statement
        String selectSql = "SELECT * FROM Salary WHERE emp_id = ? AND salary_month = ?";
        pst = conn.prepareStatement(selectSql);
        pst.setDouble(1, Double.parseDouble(txt_id.getText()));
        pst.setString(2, Objects.toString(month_combobox.getSelectedItem(), ""));
        ResultSet rs = pst.executeQuery();

        // Check if a record exists based on the SELECT criteria
        if (rs.next()) {
            JOptionPane.showMessageDialog(null, "Data for the employee in the month already exists. Please update the data accordingly.");
        } else {
            String sql = "INSERT INTO Salary "
                    + "(salary_allowance, salary_ot_hour, salary_rate_per_hour, "
                    + "salary_ot_pay, salary_epf_emp, salary_sosco_emp, "
                    + "salary_eis_emp, salary_pcb, salary_other_deduction, "
                    + "salary_total_deduction, salary_net_pay, salary_gross_pay, "
                    + "salary_month, salary_sales, salary_commission, emp_id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            pst = conn.prepareStatement(sql);
            pst.setDouble(1, Double.parseDouble(txt_allowance.getText()));
            pst.setDouble(2, Double.parseDouble(txt_overtimeHours.getText()));
            pst.setDouble(3, Double.parseDouble(txt_rate_per_hour.getText()));
            pst.setDouble(4, Double.parseDouble(overtime_pay_rm_label.getText()));
            pst.setDouble(5, Double.parseDouble(epf_rm_label.getText()));
            pst.setDouble(6, Double.parseDouble(sosco_rm_label.getText()));
            pst.setDouble(7, Double.parseDouble(eis_rm_label.getText()));
            pst.setDouble(8, Double.parseDouble(txt_pcb.getText()));
            pst.setDouble(9, Double.parseDouble(txt_other_deduction.getText()));
            pst.setDouble(10, Double.parseDouble(total_deduction_rm_label.getText()));
            pst.setDouble(11, Double.parseDouble(net_pay_rm_label.getText()));
            pst.setDouble(12, Double.parseDouble(gross_pay_rm_label.getText()));
            pst.setString(13, Objects.toString(month_combobox.getSelectedItem(), ""));
            pst.setDouble(14, Double.parseDouble(txt_sales.getText()));
            pst.setDouble(15, Double.parseDouble(commission_rm_label.getText()));
            pst.setInt(16, Integer.parseInt(txt_id.getText()));
            pst.execute();
            JOptionPane.showMessageDialog(null, "Data is saved successfully");
            
            String employee = txt_id.getText();
            String action = "Save salary calculation data for employee id: " + employee;
            String auditSQL = "INSERT INTO Audit (audit_date, audit_time, audit_type, audit_action) VALUES (?,?,?,?)";
            pst = conn.prepareStatement(auditSQL);
            pst.setString(1, date);
            pst.setString(2, time);
            pst.setString(3, type);
            pst.setString(4, action);
            pst.executeUpdate();
        }
    } catch (SQLException | NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Please fill in all the required fields with valid inputs.");
    } finally {
        try {
            if (rs != null) {
                rs.close();
            }
            if (pst != null) {
                pst.close();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
}


    }//GEN-LAST:event_save_buttonActionPerformed

    private void calculate_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate_buttonActionPerformed
        // TODO add your handling code here:
        try{
           DecimalFormat decimalFormat = new DecimalFormat("#0.00");

            double basic_salary = Double.parseDouble(basic_salary_rm_label.getText());
            double allowance = Double.parseDouble(txt_allowance.getText());
            double ot_hour = Double.parseDouble(txt_overtimeHours.getText());
            double rate_per_hour = Double.parseDouble(txt_rate_per_hour.getText());
            double sales = Double.parseDouble(txt_sales.getText());  
                              
            BigDecimal roundedAllowance = new BigDecimal(allowance).setScale(2, RoundingMode.HALF_UP);
            double roundedAllowanceValue = roundedAllowance.doubleValue();
            String formattedAllowance = decimalFormat.format(roundedAllowanceValue);
            txt_allowance.setText(formattedAllowance);                     
            
            String formattedrate_per_hour = decimalFormat.format(rate_per_hour);
            txt_rate_per_hour.setText(formattedrate_per_hour);
            
            String formattedsales = decimalFormat.format(sales);
            txt_sales.setText(formattedsales);
            
            double overtime_pay = ot_hour * rate_per_hour;
            BigDecimal roundedOvertimePay = new BigDecimal(overtime_pay).setScale(2, RoundingMode.HALF_UP);
            double roundedOvertimePayValue = roundedOvertimePay.doubleValue();
            String formattedOvertimePay = decimalFormat.format(roundedOvertimePayValue);
            overtime_pay_rm_label.setText(formattedOvertimePay);
            
            double commission = sales*0.06;
            BigDecimal roundedCommission = new BigDecimal(commission).setScale(2, RoundingMode.HALF_UP);
            double roundedCommissionPayValue = roundedCommission.doubleValue();
            String formattedCommission = decimalFormat.format(roundedCommissionPayValue);
            commission_rm_label.setText(formattedCommission);

            double gross_salary = (basic_salary + roundedAllowanceValue) + roundedOvertimePayValue +  roundedCommissionPayValue;
            BigDecimal roundedGrossSalary = new BigDecimal(gross_salary).setScale(2, RoundingMode.HALF_UP);
            double roundedGrossSalaryValue = roundedGrossSalary.doubleValue();
            String formattedGrossSalary = decimalFormat.format(roundedGrossSalaryValue);
            gross_pay_rm_label.setText(formattedGrossSalary);

            double epf = (basic_salary + roundedAllowanceValue + roundedCommissionPayValue) * 0.09;
            BigDecimal roundedEPF = new BigDecimal(epf).setScale(2, RoundingMode.HALF_UP);
            double roundedEPFValue = roundedEPF.doubleValue();
            String formattedEPF = decimalFormat.format(roundedEPFValue);
            epf_rm_label.setText(formattedEPF);

            double sosco = (basic_salary + roundedAllowanceValue + roundedOvertimePayValue +  roundedCommissionPayValue) * 0.05;
            BigDecimal roundedSOSCO = new BigDecimal(sosco).setScale(2, RoundingMode.HALF_UP);
            double roundedSOSCOValue = roundedSOSCO.doubleValue();
            String formattedSOSCO = decimalFormat.format(roundedSOSCOValue);
            sosco_rm_label.setText(formattedSOSCO);

            double eis = (basic_salary + roundedAllowanceValue + roundedOvertimePayValue + roundedCommissionPayValue) * 0.02;
            BigDecimal roundedEIS = new BigDecimal(eis).setScale(2, RoundingMode.HALF_UP);
            double roundedEISValue = roundedEIS.doubleValue();
            String formattedEIS = decimalFormat.format(roundedEISValue);
            eis_rm_label.setText(formattedEIS);

            double pcb = Double.parseDouble(txt_pcb.getText());
            String formattedPCB = decimalFormat.format(pcb);
            txt_pcb.setText(formattedPCB);
                       
            double other_deduction = Double.parseDouble(txt_other_deduction.getText());
            String formattedother_deduction = decimalFormat.format(other_deduction);
            txt_other_deduction.setText(formattedother_deduction );
            
            double total_deduction = roundedEPFValue + roundedSOSCOValue + roundedEISValue + pcb + other_deduction;
            BigDecimal roundedTotalDeduction = new BigDecimal(total_deduction).setScale(2, RoundingMode.HALF_UP);
            double roundedTotalDeductionValue = roundedTotalDeduction.doubleValue();
            String formattedTotalDeduction = decimalFormat.format(roundedTotalDeductionValue);
            total_deduction_rm_label.setText(formattedTotalDeduction);

            double net_pay = roundedGrossSalaryValue - roundedTotalDeductionValue;
            BigDecimal roundedNetPay = new BigDecimal(net_pay).setScale(2, RoundingMode.HALF_UP);
            double roundedNetPayValue = roundedNetPay.doubleValue();
            String formattedNetPay = decimalFormat.format(roundedNetPayValue);
            net_pay_rm_label.setText(formattedNetPay);
        }catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Please fill in all the required fields with valid inputs.");
        }
        finally {

            try{

                if (rs != null) {
                rs.close();
                pst.close();
            }

            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
    }//GEN-LAST:event_calculate_buttonActionPerformed

    private void clear_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_buttonActionPerformed
        // TODO add your handling code here:
        txt_search.setText("");
        txt_id.setText("");
        txt_position.setText("");
        txt_name.setText("");
        
        month_combobox.setSelectedItem("Jan");
        basic_salary_rm_label.setText("0.00");
        txt_allowance.setText("");
        txt_overtimeHours.setText("");
        txt_rate_per_hour.setText("");
        txt_sales.setText("");
        overtime_pay_rm_label.setText("0.00");
        commission_rm_label.setText("0.00");
        gross_pay_rm_label.setText("0.00");
        
        epf_rm_label.setText("0.00");
        sosco_rm_label.setText("0.00");
        eis_rm_label.setText("0.00");
        txt_pcb.setText("");
        txt_other_deduction.setText("");
        total_deduction_rm_label.setText("0.00");
        net_pay_rm_label.setText("0.00");
        
        lab.setText(null);
        olab.setText(null);
        rlab.setText(null);
        slab.setText(null);
        ilab.setText(null);
        odlab.setText(null);
    }//GEN-LAST:event_clear_buttonActionPerformed

    private void txt_pcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_pcbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_pcbActionPerformed

    private void txt_other_deductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_other_deductionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_other_deductionActionPerformed

    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
        // TODO add your handling code here:  
            try {
                String sql = "select * from Employee where employee_id=? ";
                pst = conn.prepareStatement(sql);
                pst.setString(1, txt_search.getText());
                rs = pst.executeQuery();
                

                if (rs.next()) {
                    String add1 = rs.getString("employee_id");
                    txt_id.setText(add1);

                    String add2 = rs.getString("employee_name");
                    txt_name.setText(add2);

                    String add3 = rs.getString("employee_position");
                    txt_position.setText(add3);
                    
                    String add4 = rs.getString("employee_basic_salary");
                    Double basic_salary = Double.valueOf(add4);          
                    DecimalFormat decimalFormat = new DecimalFormat("#0.00");                                  
                    String formattedadd4 = decimalFormat.format(basic_salary);                
                    basic_salary_rm_label.setText(formattedadd4);
                    
                    String department = rs.getString ("employee_department");
                    
                    if(!"Sales".equals(department) && !"SALES".equals(department)){
                        txt_sales.setText("0.00");
                        commission_rm_label.setText("0.00");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Data not found");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "SQL error: " + e.getMessage());
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (pst != null) {
                        pst.close();
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
    }//GEN-LAST:event_txt_searchKeyReleased

    private void month_comboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_month_comboboxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_month_comboboxActionPerformed

    private void txt_allowanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_allowanceKeyReleased
        // TODO add your handling code here:
        String allowanceText = txt_allowance.getText().trim();

        if (!allowanceText.isEmpty()) {
            try {
                Double allowance = Double.valueOf(allowanceText);

                if (allowance < 0) {
                    lab.setText("Enter 0 or positive value");
                } else {
                    lab.setText(null);
                }
            } catch (NumberFormatException e) {
                lab.setText("Invalid input.");
            }
        } else {
            lab.setText("Input cannot be empty");
        }           
    }//GEN-LAST:event_txt_allowanceKeyReleased

    private void txt_overtimeHoursKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_overtimeHoursKeyReleased
        // TODO add your handling code here:
        String overtimeHoursText = txt_overtimeHours.getText().trim();

        if (!overtimeHoursText.isEmpty()) {
            try {
                Double overtimeHours = Double.valueOf(overtimeHoursText);

                if (overtimeHours< 0) {
                    olab.setText("Enter 0 or positive value");
                } else {
                    olab.setText(null);
                }
            } catch (NumberFormatException e) {
                olab.setText("Invalid input");
            }
        } else {
            olab.setText("Input cannot be empty");
        }      
    }//GEN-LAST:event_txt_overtimeHoursKeyReleased

    private void txt_salesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_salesKeyReleased
        // TODO add your handling code here:
        String salesText = txt_sales.getText().trim();

        if (!salesText.isEmpty()) {
            try {
                Double sales = Double.valueOf(salesText);

                if (sales< 0) {
                    slab.setText("Enter 0 or positive value");
                }
                 else
                    slab.setText(null);
                
            } catch (NumberFormatException e) {
                slab.setText("Invalid input");
            }
        } else {
            slab.setText("Input cannot be empty");
        }       
    }//GEN-LAST:event_txt_salesKeyReleased

    private void txt_pcbKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pcbKeyReleased
        // TODO add your handling code here:
        String pcbText = txt_pcb.getText().trim();

        if (!pcbText.isEmpty()) {
            try {
                Double pcb = Double.valueOf(pcbText);

                if (pcb< 0) {
                    ilab.setText("Enter 0 or positive value");
                } else {
                    ilab.setText(null);
                }
            } catch (NumberFormatException e) {
                ilab.setText("Invalid input");
            }
        } else {
            ilab.setText("Input cannot be empty");
        }     
    }//GEN-LAST:event_txt_pcbKeyReleased

    private void txt_other_deductionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_other_deductionKeyReleased
        // TODO add your handling code here:
        String other_deductionText = txt_other_deduction.getText().trim();

        if (!other_deductionText.isEmpty()) {
            try {
                Double other_deduction = Double.valueOf(other_deductionText);

                if (other_deduction< 0) {
                    odlab.setText("Enter 0 or positive value");
                } else {
                    odlab.setText(null);
                }
            } catch (NumberFormatException e) {
                odlab.setText("Invalid input");
            }
        } else {
            odlab.setText("Input cannot be empty");
        }     
    }//GEN-LAST:event_txt_other_deductionKeyReleased

    private void logout_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_buttonActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showOptionDialog(
            this,
            "Are you sure you want to logout?",
            "Confirm Logout",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            new Object[]{"Logout", "Cancel"},
            "Logout"
        );

        if (option == JOptionPane.YES_OPTION) {
            Login x = new Login();
            x.setVisible(true);
            this.dispose();
            
            String action = "Logout as " + username;
            String auditSQL = "INSERT INTO Audit (audit_date, audit_time, audit_type, audit_action) VALUES (?,?,?,?)";
            try {
                pst = conn.prepareStatement(auditSQL);
                pst.setString(1, date);
                pst.setString(2, time);
                pst.setString(3, "Login & Logout");
                pst.setString(4, action);
                pst.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(Homepage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_logout_buttonActionPerformed

    private void dashboard_button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboard_button1ActionPerformed
        // TODO add your handling code here:
        Homepage h = new Homepage();
        h.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_dashboard_button1ActionPerformed

    private void employee_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employee_buttonActionPerformed
        // TODO add your handling code here:
        EmployeeManagement e = new EmployeeManagement(username);
        e.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_employee_buttonActionPerformed

    private void calculation_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculation_buttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calculation_buttonActionPerformed

    private void slip_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slip_buttonActionPerformed
        // TODO add your handling code here:
        SalarySlip s = new SalarySlip(username);
        s.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_slip_buttonActionPerformed

    private void txt_rate_per_hourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_rate_per_hourActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_rate_per_hourActionPerformed

    private void txt_rate_per_hourKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_rate_per_hourKeyReleased
        // TODO add your handling code here
        String rate_per_hourText = txt_rate_per_hour.getText().trim();

        if (!rate_per_hourText.isEmpty()) {
            try {
                Double rate_per_hour = Double.valueOf(rate_per_hourText);

                if (rate_per_hour< 0) {
                    rlab.setText("Enter 0 or positive value");
                } else {
                    rlab.setText(null);
                }
            } catch (NumberFormatException e) {
                rlab.setText("Invalid input");
            }
        } else {
            rlab.setText("Input cannot be empty");
        }     
    }//GEN-LAST:event_txt_rate_per_hourKeyReleased

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
        // TODO add your handling code here:
         try {
        // SELECT statement
        String selectSql = "SELECT * FROM Salary WHERE emp_id = ? AND salary_month = ?";
        pst = conn.prepareStatement(selectSql);
        pst.setDouble(1, Double.parseDouble(txt_id.getText()));
        pst.setString(2, Objects.toString(month_combobox.getSelectedItem(), ""));
        ResultSet rs = pst.executeQuery();

        // Check if a record exists based on the SELECT criteria
        if (rs.next()) {
            // If a record exists, update it
            String updateSql = "UPDATE Salary SET "
                    + "salary_allowance = ?, salary_ot_hour = ?, salary_rate_per_hour = ?, "
                    + "salary_ot_pay = ?, salary_epf_emp = ?, salary_sosco_emp = ?, "
                    + "salary_eis_emp = ?, salary_pcb = ?, salary_other_deduction = ?, "
                    + "salary_total_deduction = ?, salary_net_pay = ?, salary_gross_pay = ?, "
                    + "salary_sales = ?, salary_commission = ? "
                    + "WHERE emp_id = ? AND salary_month = ?";

            pst = conn.prepareStatement(updateSql);
            // Set the parameters for the update
            pst.setDouble(1, Double.parseDouble(txt_allowance.getText()));
            pst.setDouble(2, Double.parseDouble(txt_overtimeHours.getText()));
            pst.setDouble(3, Double.parseDouble(txt_rate_per_hour.getText()));
            pst.setDouble(4, Double.parseDouble(overtime_pay_rm_label.getText()));
            pst.setDouble(5, Double.parseDouble(epf_rm_label.getText()));
            pst.setDouble(6, Double.parseDouble(sosco_rm_label.getText()));
            pst.setDouble(7, Double.parseDouble(eis_rm_label.getText()));
            pst.setDouble(8, Double.parseDouble(txt_pcb.getText()));
            pst.setDouble(9, Double.parseDouble(txt_other_deduction.getText()));
            pst.setDouble(10, Double.parseDouble(total_deduction_rm_label.getText()));
            pst.setDouble(11, Double.parseDouble(net_pay_rm_label.getText()));        
            pst.setDouble(12, Double.parseDouble(gross_pay_rm_label.getText()));
            pst.setDouble(13, Double.parseDouble(txt_sales.getText()));
            pst.setDouble(14, Double.parseDouble(commission_rm_label.getText()));
            pst.setInt(15, Integer.parseInt(txt_id.getText()));
            pst.setString(16, Objects.toString(month_combobox.getSelectedItem(), ""));

            // Execute the update
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Data is updated successfully");
            
            String employee = txt_id.getText();
            String action = "Save salary calculation data for employee id: " + employee;
            String auditSQL = "INSERT INTO Audit (audit_date, audit_time, audit_type, audit_action) VALUES (?,?,?,?)";
            pst = conn.prepareStatement(auditSQL);
            pst.setString(1, date);
            pst.setString(2, time);
            pst.setString(3, type);
            pst.setString(4, action);
            pst.executeUpdate();
        } else {
            JOptionPane.showMessageDialog(null, "Data not found. Please save data to be updated.");
        }
    } catch (SQLException | NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Please fill in all the required fields with valid inputs.");
    } finally {
        try {
            if (rs != null) {
                rs.close();
            }
            if (pst != null) {
                pst.close();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }    
    }//GEN-LAST:event_update_buttonActionPerformed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
        Homepage h = new Homepage();
        h.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backMouseClicked

    private void audit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audit_buttonActionPerformed
        // TODO add your handling code here:
        Audit a = new Audit(username);
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_audit_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalaryCalculation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel allowance_label1;
    private javax.swing.JButton audit_button;
    private javax.swing.JLabel back;
    private javax.swing.JLabel basic_salary_label;
    private javax.swing.JLabel basic_salary_rm_label;
    private javax.swing.JButton calculate_button;
    private javax.swing.JButton calculation_button;
    private javax.swing.JPanel calculation_panel;
    private javax.swing.JButton clear_button;
    private javax.swing.JLabel commission_rm_label;
    private javax.swing.JButton dashboard_button1;
    private javax.swing.JLabel deductions_label;
    private javax.swing.JLabel earnings_label;
    private javax.swing.JLabel eis_label;
    private javax.swing.JLabel eis_rm_label;
    private javax.swing.JButton employee_button;
    private javax.swing.JLabel epf_label;
    private javax.swing.JLabel epf_rm_label;
    private javax.swing.JLabel greeting_label;
    private javax.swing.JLabel gross_pay_label;
    private javax.swing.JLabel gross_pay_rm_label;
    private javax.swing.JLabel hr_label;
    private javax.swing.JLabel id_label;
    private javax.swing.JLabel ilab;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel lab;
    private javax.swing.JButton logout_button;
    private javax.swing.JPanel main_panel;
    private javax.swing.JComboBox<String> month_combobox;
    private javax.swing.JLabel month_label;
    private javax.swing.JLabel name_label;
    private javax.swing.JLabel net_pay_label;
    private javax.swing.JLabel net_pay_rm_label;
    private javax.swing.JLabel odlab;
    private javax.swing.JLabel olab;
    private javax.swing.JLabel other_deduction_label;
    private javax.swing.JLabel overtime_hours_label;
    private javax.swing.JLabel overtime_pay_label;
    private javax.swing.JLabel overtime_pay_rm_label;
    private javax.swing.JLabel payroll_label1;
    private javax.swing.JLabel pcb_label;
    private javax.swing.JLabel position_label;
    private javax.swing.JLabel rate_per_hour_label;
    private javax.swing.JLabel rlab;
    private javax.swing.JLabel sales_label;
    private javax.swing.JLabel sales_label1;
    private javax.swing.JButton save_button;
    private javax.swing.JLabel search_label;
    private javax.swing.JPanel side_menu;
    private javax.swing.JLabel slab;
    private javax.swing.JButton slip_button;
    private javax.swing.JLabel sosco_label;
    private javax.swing.JLabel sosco_rm_label;
    private javax.swing.JLabel system_label;
    private javax.swing.JLabel total_deduction_label;
    private javax.swing.JLabel total_deduction_rm_label;
    private javax.swing.JTextField txt_allowance;
    private javax.swing.JLabel txt_id;
    private javax.swing.JLabel txt_name;
    private javax.swing.JTextField txt_other_deduction;
    private javax.swing.JTextField txt_overtimeHours;
    private javax.swing.JTextField txt_pcb;
    private javax.swing.JLabel txt_position;
    private javax.swing.JTextField txt_rate_per_hour;
    private javax.swing.JTextField txt_sales;
    private javax.swing.JTextField txt_search;
    private javax.swing.JButton update_button;
    // End of variables declaration//GEN-END:variables
}
